{"version":3,"sources":["angular-lazy.js"],"names":["ModuleListenList","appendModuleRequires","coverNgModule","createInvoke","head","isRegister","moduleProxy","register","registerCache","requireConfig","requireModule","stateModule","angular","module","isBootstrap","modules","moduleName","indexOf","method","_i","_len","push","name","length","$isProxy","invokeQueue","normal","isFunction","Error","result","apply","arguments","requires","appendList","baseRequires","req","Array","prototype","normalModule","fn","directive","restrict","compile","provider","$provide","$controllerProvider","$compileProvider","$filterProvider","$injector","$animateProvider","invokeLater","providerCache","providers","registerFunction","runLater","self","this","getInstanceInjector","injector","pname","cacheName","rs","enableDistinst","args","instance","slice","call","invoke","factory","service","value","constant","animation","filter","controller","config","run","rFn","$get","$rootElement","instanceInjector","data","document","getElementsByTagName","setConfig","extend","$cacheFactory","getFilePath","getRequireList","list","isArray","isString","isObject","forEach","v","k","fileName","relativePath","baseRequire","findRequire","onError","noop","stateName","requireList","getFile","$q","fileCache","$rootScope","ScriptLoad","filePath","deferred","that","get","defer","$promise","promise","onScriptLoad","resolve","put","$apply","onScriptError","reject","remove","loadScript","url","node","bind","createNode","addEventListener","src","appendChild","createElement","type","charset","async","setAttribute","filepath","$fileLoad","$stateProvider","$fileLoadProvider","registerState","state","jsRequire","requirejs"],"mappings":"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","file":"angular-lazy.min.js","sourcesContent":["(function() {\n  var ModuleListenList, appendModuleRequires, coverNgModule, createInvoke, head, isRegister, moduleProxy, register, registerCache, requireConfig, requireModule, stateModule;\n\n  register = angular.module('angular.lazy.register', ['ng']);\n\n  register.isBootstrap = false;\n\n  registerCache = {\n    modules: ['ng']\n  };\n\n  register.isRegister = isRegister = function(moduleName) {\n    return registerCache.modules.indexOf(moduleName) !== -1;\n  };\n\n  ModuleListenList = ['provider', 'factory', 'service', 'value', 'constant', 'animation', 'filter', 'controller', 'directive', 'config', 'run'];\n\n  moduleProxy = function(module) {\n    var method, _i, _len;\n    registerCache.modules.push(module.name);\n    for (_i = 0, _len = ModuleListenList.length; _i < _len; _i++) {\n      method = ModuleListenList[_i];\n      module[method] = createInvoke(module, method);\n    }\n    module.$isProxy = true;\n    return module;\n  };\n\n  createInvoke = function(module, method) {\n    var invokeQueue, normal;\n    normal = module[method];\n    if (!normal || !angular.isFunction(normal)) {\n      throw new Error(\"badmethod  no method \" + method + \" name\");\n    }\n    invokeQueue = function() {\n      var result;\n      result = normal.apply(module, arguments);\n      if (register.isBootstrap) {\n        register.register(module, method, arguments);\n      }\n      return result;\n    };\n    return invokeQueue;\n  };\n\n  appendModuleRequires = function(moduleName, requires) {\n    var appendList, baseRequires, module, req, _i, _len;\n    module = angular.module(moduleName);\n    baseRequires = module.requires;\n    appendList = [];\n    for (_i = 0, _len = requires.length; _i < _len; _i++) {\n      req = requires[_i];\n      if (baseRequires.indexOf(req) === -1) {\n        appendList.push(req);\n      }\n    }\n    Array.prototype.push.apply(baseRequires, appendList);\n    return module;\n  };\n\n  coverNgModule = function() {\n    var normalModule;\n    normalModule = angular.module;\n    return angular.module = function(name, requires, fn) {\n      var module;\n      if (requires && isRegister(name)) {\n        return appendModuleRequires(name, requires);\n      }\n      module = normalModule(name, requires, fn);\n      if (module.$isProxy) {\n        return module;\n      }\n      return moduleProxy(module);\n    };\n  };\n\n  register.directive(\"body\", [\n    function() {\n      return {\n        restrict: \"E\",\n        compile: function() {\n          return register.isBootstrap = true;\n        }\n      };\n    }\n  ]).provider(\"register\", [\n    \"$provide\", \"$controllerProvider\", \"$compileProvider\", \"$filterProvider\", \"$injector\", \"$animateProvider\", function($provide, $controllerProvider, $compileProvider, $filterProvider, $injector, $animateProvider) {\n      var invokeLater, providerCache, providers, registerFunction, runLater, self;\n      self = this;\n      providerCache = {};\n      providers = {\n        $provide: $provide,\n        $controllerProvider: $controllerProvider,\n        $compileProvider: $compileProvider,\n        $filterProvider: $filterProvider,\n        $injector: $injector,\n        $animateProvider: $animateProvider,\n        getInstanceInjector: function() {\n          return angular.injector();\n        }\n      };\n      invokeLater = function(pname, method) {\n        var provider;\n        provider = providers[pname];\n        if (!provider) {\n          throw new Error(\"badProvider unsupported provider \" + pname);\n        }\n        return function() {\n          var cacheName, name, rs;\n          name = arguments[0];\n          cacheName = \"\" + method + name;\n          if (self.enableDistinst && providerCache[cacheName]) {\n            return;\n          }\n          rs = provider[method].apply(provider, arguments);\n          providerCache[cacheName] = rs;\n        };\n      };\n      runLater = function() {\n        return function() {\n          var args, instance;\n          instance = providers.getInstanceInjector();\n          args = Array.prototype.slice.call(arguments, 0);\n          return instance.invoke(args);\n        };\n      };\n      registerFunction = {\n        provider: invokeLater('$provide', 'provider'),\n        factory: invokeLater('$provide', 'factory'),\n        service: invokeLater('$provide', 'service'),\n        value: invokeLater('$provide', 'value'),\n        constant: invokeLater('$provide', 'constant', 'unshift'),\n        animation: invokeLater('$animateProvider', 'register'),\n        filter: invokeLater('$filterProvider', 'register'),\n        controller: invokeLater('$controllerProvider', 'register'),\n        directive: invokeLater('$compileProvider', 'directive'),\n        config: invokeLater('$injector', 'invoke', 'push', \"_configBlocks\"),\n        run: runLater()\n      };\n      register.register = function(module, method, args) {\n        var rFn;\n        rFn = registerFunction[method];\n        if (!rFn) {\n          throw new Error(\"badFunctioin unsupproted register \" + method);\n        }\n        rFn.apply(this, args);\n      };\n      this.$get = [\n        '$rootElement', function($rootElement) {\n          providers.getInstanceInjector = function() {\n            var instanceInjector;\n            if (instanceInjector) {\n              return;\n            }\n            return instanceInjector = $rootElement.data('$injector') || angular.injector();\n          };\n          return register.register;\n        }\n      ];\n      return this;\n    }\n  ]).run(['register', function(service) {}]);\n\n  coverNgModule();\n\n  requireModule = angular.module('angular.lazy.require', ['ng']);\n\n  head = document.getElementsByTagName(\"head\")[0];\n\n  requireConfig = {};\n\n  requireModule.setConfig = function(config) {\n    if (!config) {\n      requireConfig = {};\n    } else {\n      requireConfig = angular.extend(requireConfig, config);\n    }\n    return requireModule;\n  };\n\n  requireModule.factory(\"$fileCache\", [\n    \"$cacheFactory\", function($cacheFactory) {\n      return $cacheFactory(\"fileCache\");\n    }\n  ]).provider(\"$fileLoad\", [\n    function() {\n      var getFilePath, getRequireList, provider;\n      getRequireList = function(config) {\n        var list;\n        if (angular.isArray(config)) {\n          return config;\n        }\n        list = [];\n        if (!config) {\n\n        } else if (angular.isString(config)) {\n          list.push(config);\n        } else if (angular.isObject(config)) {\n          list = [];\n          angular.forEach(config, function(v, k) {\n            return Array.prototype.push.apply(list, getRequireList(v));\n          });\n        }\n        return list;\n      };\n      getFilePath = function(fileName, relativePath) {\n        var baseRequire;\n        baseRequire = requireModule.findRequire();\n        if (relativePath) {\n          baseRequire = baseRequire[relativePath];\n        }\n        if (!baseRequire) {\n          return '';\n        }\n        return baseRequire[fileName];\n      };\n      provider = this;\n      provider.onError = angular.noop;\n      provider.setConfig = requireModule.setConfig;\n      provider.findRequire = function(stateName) {\n        var requireList;\n        requireList = requireConfig[stateName] || [];\n        requireList = getRequireList(requireList);\n        return requireList;\n      };\n      provider.getFile = function() {};\n      provider.$get = [\n        '$q', '$fileCache', '$rootScope', function($q, fileCache, $rootScope) {\n          var ScriptLoad;\n          ScriptLoad = (function() {\n            function ScriptLoad(filePath) {\n              var deferred, that;\n              if (filePath && (that = fileCache.get(filePath))) {\n                return that;\n              }\n              deferred = $q.defer();\n              this.$promise = deferred.promise;\n              this.onScriptLoad = function() {\n                deferred.resolve(123);\n                fileCache.put(filePath, this);\n                $rootScope.$apply();\n              };\n              this.onScriptError = function() {\n                deferred.reject('bad request');\n                fileCache.remove(filePath);\n                $rootScope.$apply();\n                angular.isFunction(provider.onError) && provider.onError();\n              };\n              if (!filePath) {\n                deferred.reject('empty path');\n              } else {\n                fileCache.put(filePath, this);\n                this.loadScript(filePath);\n              }\n              return this;\n            }\n\n            ScriptLoad.prototype.loadScript = function(url) {\n              var node, onScriptError, onScriptLoad;\n              onScriptError = this.onScriptError.bind(this);\n              onScriptLoad = this.onScriptLoad.bind(this);\n              node = this.createNode();\n              node.addEventListener('load', onScriptLoad);\n              node.addEventListener('error', onScriptError);\n              node.src = url;\n              return head.appendChild(node);\n            };\n\n            ScriptLoad.prototype.createNode = function() {\n              var node;\n              node = document.createElement(\"script\");\n              node.type = \"text/javascript\";\n              node.charset = 'utf-8';\n              node.async = true;\n              node.setAttribute && node.setAttribute(\"ng-lazy\", \"load\");\n              return node;\n            };\n\n            return ScriptLoad;\n\n          })();\n          return provider.getFile = function(filepath) {\n            return new ScriptLoad(filepath).$promise;\n          };\n        }\n      ];\n      return provider;\n    }\n  ]).run([\"$fileLoad\", function($fileLoad) {}]);\n\n  stateModule = angular.module('angular.lazy.state', ['ng', 'ui.router', 'angular.lazy.require', 'angular.lazy.register']);\n\n  stateModule.config([\n    '$stateProvider', '$fileLoadProvider', function($stateProvider, $fileLoadProvider) {\n      var registerState;\n      registerState = $stateProvider.state;\n      return $stateProvider.state = function(name, config) {\n        var jsRequire, resolve;\n        if (config.requirejs) {\n          jsRequire = config.requirejs;\n        } else {\n          jsRequire = $fileLoadProvider.findRequire(name);\n        }\n        if (jsRequire && (resolve = config.resolve || {})) {\n          angular.forEach(jsRequire, function(v, k) {\n            resolve[\"loadJSFile\" + k] = function() {\n              return $fileLoadProvider.getFile(v, name);\n            };\n          });\n          config.resolve = resolve;\n        }\n        return registerState.apply(this, arguments);\n      };\n    }\n  ]);\n\n}).call(this);\n"]}