{"version":3,"sources":["require.js"],"names":["head","requireConfig","requireModule","angular","module","document","getElementsByTagName","setConfig","config","extend","factory","$cacheFactory","provider","getFilePath","getRequireList","list","isArray","isString","push","isObject","forEach","v","k","fileName","relativePath","baseRequire","findRequire","this","onError","noop","stateName","requireList","getFile","$get","$q","fileCache","$rootScope","ScriptLoad","filePath","deferred","that","get","defer","$promise","promise","onScriptLoad","resolve","put","$apply","onScriptError","reject","remove","isFunction","loadScript","prototype","url","node","bind","createNode","addEventListener","src","appendChild","createElement","type","charset","async","setAttribute","filepath","load","file","all","run","$fileLoad","call"],"mappings":";CAAA,WACE,GAAIA,GAAMC,EAAeC,CAEzBA,GAAgBC,QAAQC,OAAO,wBAAyB,OAExDJ,EAAOK,SAASC,qBAAqB,QAAQ,GAE7CL,KAEAC,EAAcK,UAAY,SAASC,GAMjC,MAFEP,GAHGO,EAGaL,QAAQM,OAAOR,EAAeO,MAEzCN,GAGTA,EAAcQ,QAAQ,cACpB,gBAAiB,SAASC,GACxB,MAAOA,GAAc,gBAEtBC,SAAS,aACV,WACE,GAAIC,GAAaC,EAAgBF,CAsHjC,OArHAE,GAAiB,SAASN,GACxB,GAAIO,EACJ,OAAIZ,SAAQa,QAAQR,GACXA,GAETO,KACKP,IAEML,QAAQc,SAAST,GAC1BO,EAAKG,KAAKV,GACDL,QAAQgB,SAASX,KAC1BO,KACAZ,QAAQiB,QAAQZ,EAAQ,SAASa,EAAGC,GAClC,MAAOP,GAAKO,GAAKD,MAGdN,IAETF,EAAc,SAASU,EAAUC,GAC/B,GAAIC,EAKJ,OAJAA,GAAcvB,EAAcwB,cACxBF,IACFC,EAAcA,EAAYD,IAEvBC,EAGEA,EAAYF,GAFV,IAIXX,EAAWe,KACXf,EAASgB,QAAUzB,QAAQ0B,KAC3BjB,EAASL,UAAYL,EAAcK,UACnCK,EAASc,YAAc,SAASI,GAC9B,GAAIC,EAGJ,OAFAA,GAAc9B,EAAc6B,OAC5BC,EAAcjB,EAAeiB,IAG/BnB,EAASoB,QAAU,aACnBpB,EAASqB,MACP,KAAM,aAAc,aAAc,SAASC,EAAIC,EAAWC,GACxD,GAAIC,EAqDJ,OApDAA,GAAa,WACX,QAASA,GAAWC,GAClB,GAAIC,GAAUC,CACd,OAAIF,KAAaE,EAAOL,EAAUM,IAAIH,IAC7BE,GAETD,EAAWL,EAAGQ,QACdf,KAAKgB,SAAWJ,EAASK,QACzBjB,KAAKkB,aAAe,WAClBN,EAASO,QAAQ,KACjBX,EAAUY,IAAIT,GAAU,GACxBF,EAAWY,UAEbrB,KAAKsB,cAAgB,WACnBV,EAASW,OAAO,eAChBf,EAAUgB,OAAOb,GACjBF,EAAWY,SACX7C,QAAQiD,WAAWxC,EAASgB,UAAYhB,EAASgB,WAE9CU,GAGHH,EAAUY,IAAIT,EAAUX,MACxBA,KAAK0B,WAAWf,IAHhBC,EAASW,OAAO,cAKXvB,MAwBT,MArBAU,GAAWiB,UAAUD,WAAa,SAASE,GACzC,GAAIC,GAAMP,EAAeJ,CAOzB,OANAI,GAAgBtB,KAAKsB,cAAcQ,KAAK9B,MACxCkB,EAAelB,KAAKkB,aAAaY,KAAK9B,MACtC6B,EAAO7B,KAAK+B,aACZF,EAAKG,iBAAiB,OAAQd,GAC9BW,EAAKG,iBAAiB,QAASV,GAC/BO,EAAKI,IAAML,EACJvD,EAAK6D,YAAYL,IAG1BnB,EAAWiB,UAAUI,WAAa,WAChC,GAAIF,EAMJ,OALAA,GAAOnD,SAASyD,cAAc,UAC9BN,EAAKO,KAAO,kBACZP,EAAKQ,QAAU,QACfR,EAAKS,OAAQ,EACbT,EAAKU,cAAgBV,EAAKU,aAAa,UAAW,QAC3CV,GAGFnB,KAGFzB,EAASoB,QAAU,SAASmC,GACjC,GAAIC,GAAMxB,CACV,OAAIzC,SAAQa,QAAQmD,IAClBvB,KACAzC,QAAQiB,QAAQ+C,EAAU,SAASE,GACjC,GAAID,EAEJ,OADAA,GAAO,GAAI/B,GAAWgC,GAClBD,GAAQA,EAAKzB,SACRC,EAAQ1B,KAAKkD,EAAKzB,UAD3B,SAIKT,EAAGoC,IAAI1B,KAEdwB,EAAO,GAAI/B,GAAW8B,GAClBC,EAAKzB,SACAyB,EAAKzB,SAELyB,MAMVxD,KAER2D,KAAK,YAAa,SAASC,SAE7BC,KAAK9C","file":"require.min.js","sourcesContent":["(function() {\n  var head, requireConfig, requireModule;\n\n  requireModule = angular.module('angular.lazy.require', ['ng']);\n\n  head = document.getElementsByTagName(\"head\")[0];\n\n  requireConfig = {};\n\n  requireModule.setConfig = function(config) {\n    if (!config) {\n      requireConfig = {};\n    } else {\n      requireConfig = angular.extend(requireConfig, config);\n    }\n    return requireModule;\n  };\n\n  requireModule.factory(\"$fileCache\", [\n    \"$cacheFactory\", function($cacheFactory) {\n      return $cacheFactory(\"fileCache\");\n    }\n  ]).provider(\"$fileLoad\", [\n    function() {\n      var getFilePath, getRequireList, provider;\n      getRequireList = function(config) {\n        var list;\n        if (angular.isArray(config)) {\n          return config;\n        }\n        list = [];\n        if (!config) {\n\n        } else if (angular.isString(config)) {\n          list.push(config);\n        } else if (angular.isObject(config)) {\n          list = {};\n          angular.forEach(config, function(v, k) {\n            return list[k] = v;\n          });\n        }\n        return list;\n      };\n      getFilePath = function(fileName, relativePath) {\n        var baseRequire;\n        baseRequire = requireModule.findRequire();\n        if (relativePath) {\n          baseRequire = baseRequire[relativePath];\n        }\n        if (!baseRequire) {\n          return '';\n        }\n        return baseRequire[fileName];\n      };\n      provider = this;\n      provider.onError = angular.noop;\n      provider.setConfig = requireModule.setConfig;\n      provider.findRequire = function(stateName) {\n        var requireList;\n        requireList = requireConfig[stateName] || [];\n        requireList = getRequireList(requireList);\n        return requireList;\n      };\n      provider.getFile = function() {};\n      provider.$get = [\n        '$q', '$fileCache', '$rootScope', function($q, fileCache, $rootScope) {\n          var ScriptLoad;\n          ScriptLoad = (function() {\n            function ScriptLoad(filePath) {\n              var deferred, that;\n              if (filePath && (that = fileCache.get(filePath))) {\n                return that;\n              }\n              deferred = $q.defer();\n              this.$promise = deferred.promise;\n              this.onScriptLoad = function() {\n                deferred.resolve(123);\n                fileCache.put(filePath, true);\n                $rootScope.$apply();\n              };\n              this.onScriptError = function() {\n                deferred.reject('bad request');\n                fileCache.remove(filePath);\n                $rootScope.$apply();\n                angular.isFunction(provider.onError) && provider.onError();\n              };\n              if (!filePath) {\n                deferred.reject('empty path');\n              } else {\n                fileCache.put(filePath, this);\n                this.loadScript(filePath);\n              }\n              return this;\n            }\n\n            ScriptLoad.prototype.loadScript = function(url) {\n              var node, onScriptError, onScriptLoad;\n              onScriptError = this.onScriptError.bind(this);\n              onScriptLoad = this.onScriptLoad.bind(this);\n              node = this.createNode();\n              node.addEventListener('load', onScriptLoad);\n              node.addEventListener('error', onScriptError);\n              node.src = url;\n              return head.appendChild(node);\n            };\n\n            ScriptLoad.prototype.createNode = function() {\n              var node;\n              node = document.createElement(\"script\");\n              node.type = \"text/javascript\";\n              node.charset = 'utf-8';\n              node.async = true;\n              node.setAttribute && node.setAttribute(\"ng-lazy\", \"load\");\n              return node;\n            };\n\n            return ScriptLoad;\n\n          })();\n          return provider.getFile = function(filepath) {\n            var load, promise;\n            if (angular.isArray(filepath)) {\n              promise = [];\n              angular.forEach(filepath, function(file) {\n                var load;\n                load = new ScriptLoad(file);\n                if (load && load.$promise) {\n                  return promise.push(load.$promise);\n                }\n              });\n              return $q.all(promise);\n            } else {\n              load = new ScriptLoad(filepath);\n              if (load.$promise) {\n                return load.$promise;\n              } else {\n                return load;\n              }\n            }\n          };\n        }\n      ];\n      return provider;\n    }\n  ]).run([\"$fileLoad\", function($fileLoad) {}]);\n\n}).call(this);\n"]}